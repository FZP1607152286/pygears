<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">PyGears - Posted in 2018</title>
  <id>https://bogdanvuk.github.io/pygears/blog/2018/atom.xml</id>
  <updated>2018-10-06T00:00:00Z</updated>
  <link href="https://bogdanvuk.github.io/pygears/" />
  <link href="https://bogdanvuk.github.io/pygears/blog/2018/atom.xml" rel="self" />
  <generator uri="http://ablog.readthedocs.org" version="0.9.2">ABlog</generator>
  <entry xml:base="https://bogdanvuk.github.io/pygears/blog/2018/atom.xml">
    <title type="text">RISC-V Blog Series Introduction</title>
    <id>https://bogdanvuk.github.io/pygears/riscv/introduction.html</id>
    <updated>2018-10-06T00:00:00Z</updated>
    <published>2018-10-06T00:00:00Z</published>
    <link href="https://bogdanvuk.github.io/pygears/riscv/introduction.html" />
    <author>
      <name>Bogdan Vukobratović</name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;risc-v-blog-series-introduction&quot;&gt;


&lt;script&gt;
 function changeVerbosity(verbosity) {

     document.getElementById(&quot;verbosity_value&quot;).value = verbosity;
     document.getElementById(&quot;verbosity_slider&quot;).value = verbosity;

     var a = document.querySelectorAll('[data-verbosity]');

     for (var i in a) if (a.hasOwnProperty(i)) {
         if (a[i].getAttribute('data-verbosity') &lt;= verbosity) {
             a[i].removeAttribute(&quot;hidden&quot;)
         } else {
             a[i].setAttribute(&quot;hidden&quot;, &quot;true&quot;)
         }
     }
 }
&lt;/script&gt;

&lt;form class=&quot;slidecontainer&quot;&gt;
    &lt;b&gt;Slide to adjust verbosity level&amp;ensp;&lt;/b&gt;
    &lt;input type=&quot;range&quot; min=&quot;1&quot; max=&quot;2&quot; value=&quot;1&quot; name=&quot;verbositySlider&quot; id=&quot;verbosity_slider&quot; onchange=&quot;changeVerbosity(this.value);&quot;&gt;
    &amp;ensp;
    &lt;input type=&quot;number&quot; maxlength=&quot;1&quot; id=&quot;verbosity_value&quot; min=&quot;1&quot; max=&quot;2&quot; value=&quot;1&quot; oninput=&quot;changeVerbosity(this.value);&quot; style=&quot;font-weight: bold&quot;/&gt;
&lt;/form&gt;
&lt;p&gt;Relevant PyGears git commit: &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/bogdanvuk/pygears/tree/29f6f56f85697cd754befc6b60aa3506fc7fa851&quot;&gt;29f6f56&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Welcome to the blog series in which I’ll be implementing the &lt;a class=&quot;reference external&quot; href=&quot;https://riscv.org/risc-v-isa/&quot;&gt;RISC-V ISA&lt;/a&gt; (Instruction Set Architecture) in hardware using functional approach with &lt;a class=&quot;reference external&quot; href=&quot;https://bogdanvuk.github.io/pygears/index.html&quot;&gt;PyGears&lt;/a&gt;. My aim is to show how PyGears offers a way to build hardware in an incremental, evolutionary fashion, where the architecture, implementation and the verification environment evolve together, as opposed to the standard approach where these steps mostly happen in sequence. Developping hardware in such an &lt;a class=&quot;reference external&quot; href=&quot;https://en.wikipedia.org/wiki/Agile_software_development&quot;&gt;agile&lt;/a&gt; way offers many benefits to the hardware design process, with some of them being that:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;p&gt;I don’t need to take into the account all the requirements from the start in order to design the architecture before I start the implementation. &lt;span data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt; This means that I will sooner start the implementation and have feedback about my architectural choices and thus avoid catching architectural errors late, which are then most expensive to fix.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I can get an &lt;a class=&quot;reference external&quot; href=&quot;https://en.wikipedia.org/wiki/Minimum_viable_product&quot;&gt;MVP&lt;/a&gt; (Minimum Viable Product) early, which means that I can start &lt;a class=&quot;reference external&quot; href=&quot;http://softwaretestingfundamentals.com/system-testing/&quot;&gt;system testing&lt;/a&gt; early and try to catch errors in the design’s &lt;a class=&quot;reference external&quot; href=&quot;https://en.wikipedia.org/wiki/Functional_requirement&quot;&gt;functional requirements&lt;/a&gt; as early as possible.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I can maintain my MVP, so that the customer can try to use the hardware at different stages throughout the development. &lt;span data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt; This offers him a chance to shorten the time-to-market and may provide me with the valuable feedback. This can again lead to the change to the requirements which I would like to have as early as possible.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;“Hardware” and “requirements change” are two things that were not meant to go together, but the electronics industry is developing at an ever accelerating pace so this needs to change. &lt;span data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt; This is also recognized by the very authors of the RISC-V ISA, and summed up in their paper &lt;/span&gt;&lt;a class=&quot;reference external&quot; data-verbosity=&quot;2&quot; hidden=&quot;true&quot; href=&quot;https://people.eecs.berkeley.edu/~bora/Journals/2016/IEEEMicro16.pdf&quot;&gt;AN AGILE APPROACH TO BUILDING RISC-V MICROPROCESSORS&lt;/a&gt;&lt;span data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;why-pygears&quot;&gt;
&lt;h2&gt;Why PyGears?&lt;/h2&gt;
&lt;p data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;Traditional HDLs and design methodologies built around them are ill-suited for building larger hardware systems, because they offer very few means of abstraction, besides grouping the implementation into modules. Modules are furthermore quite often formed in the wrong way, by bundling various functionalities together because they operate on the same data, even though they serve different purposes. Think big clunky control path state machines with many outputs which are usually the major source of bugs and a major obstacle for adding new features.&lt;/p&gt;
&lt;div class=&quot;figure align-center&quot; data-verbosity=&quot;2&quot; hidden=&quot;true&quot; id=&quot;id1&quot;&gt;
&lt;img alt=&quot;../_images/fsm.png&quot; data-verbosity=&quot;2&quot; hidden=&quot;true&quot; src=&quot;../_images/fsm.png&quot; style=&quot;width: 312.0px; height: 326.0px;&quot; /&gt;
&lt;p class=&quot;caption&quot; data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;&lt;span class=&quot;caption-text&quot; data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;Image from &lt;a class=&quot;reference external&quot; data-verbosity=&quot;2&quot; hidden=&quot;true&quot; href=&quot;http://ece-research.unm.edu/jimp/codesign/slides/microprogramming.pdf&quot;&gt;&amp;lt;http://ece-research.unm.edu/jimp/codesign/slides/microprogramming.pdf&amp;gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;Each of these outputs is probably computed by a functionality that deserves its own module, its own little abstraction. Why are they than being sucked into state machine module monsters? Usually because we either believe that it leads to a more optimized design, or we are afraid of synchronization issues. But wire is a wire even if it leaves the module boundaries, and decent hardware synthesis tools offer inter-module optimization, so we lose next to nothing by factoring out the functionality. As for the synchronization, putting everything in a single module just offers a false sense of security and sweeps the problem under the rug until later when functionality piles up inside the module and pipelining becomes a nightmare, not to mention dealing with synchronization issues between such complex modules.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Since the biggest issue with maintaining a large hardware design is synchronization (as with any other massively parallel system: think multithreading in software), PyGears tries to face it upfront by forcing each module to implement a &lt;/span&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://bogdanvuk.github.io/pygears/gears.html#one-interface&quot;&gt;flow-controlled interface&lt;/a&gt;&lt;span&gt;, which turns modules into “gears” in PyGears terminology (checkout this &lt;/span&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://bogdanvuk.github.io/pygears/gears.html&quot;&gt;quick introduction to gears&lt;/a&gt;&lt;span&gt;). &lt;/span&gt;&lt;span data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt; As much as it may seem as an overkill in the beginning, it usually pays-off later, and is easily optimized-away by the hardware synthesis tools if not really needed. &lt;/span&gt;&lt;span&gt; Gears are not built around the state, but are formed to group and abstract some functionality, while the state is embedded in the data sent between the gears. This further alleviates the synchronization problem and pipelined architectures arise naturally, as I intend to show while implementing RISC-V ISA.&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;../_images/tikz-fb469c944d72dd32a859ee29fb8934cda7c66991.png&quot; alt=&quot;\draw[thick] (0, 0) \gear{10}{2}{2.4}{16}{2}{prod}{Producer};
\draw[thick,xshift=120mm] \gear{10}{2}{2.4}{16}{2}{cons}{Consumer};
\draw[-Triangle,line width=2mm] (3, 1) -- node[above] {Data [T]} ++(6, 0);
\draw[-Triangle,line width=0.5mm] (3, -0.5) -- node[above] {Valid} ++(6, 0);
\draw[Triangle-,line width=0.5mm] (3, -1.5) -- node[above] {Ready} ++(6, 0);
\node (A) [cylinder, draw,minimum height=6.8cm,minimum width=3.8cm, label=below:DTI] at (6,0) {};&quot; /&gt;&lt;/p&gt;
&lt;p class=&quot;caption&quot;&gt;DTI - Data Transfer Interface&lt;/p&gt;&lt;/div&gt;&lt;p&gt;&lt;span&gt;Gears are also assigned &lt;/span&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://bogdanvuk.github.io/pygears/gears.html#powerful-type-system&quot;&gt;data types&lt;/a&gt;&lt;span&gt; for their interfaces, which dramatically eases their composition. If gears are easily &lt;/span&gt;&lt;strong&gt;composable&lt;/strong&gt;&lt;span&gt;, then they can be used in wider variety of situations, hence they are &lt;/span&gt;&lt;strong&gt;reusable&lt;/strong&gt;&lt;span&gt;. It makes sense then to create well-thought-out and well-tested &lt;/span&gt;&lt;strong&gt;libraries of gears&lt;/strong&gt;&lt;span&gt; (like &lt;/span&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/bogdanvuk/pygears/tree/master/pygears/cookbook&quot;&gt;cookbook&lt;/a&gt;&lt;span&gt; and &lt;/span&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/bogdanvuk/pygears/tree/master/pygears/common&quot;&gt;common&lt;/a&gt;&lt;span&gt; libraries shipped with PyGears), which pays off in the long run by reducing the design time and reducing the number of bugs. &lt;/span&gt;&lt;span data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt; Absence of such libraries in other HDLs, speeks for itself.&lt;/span&gt;&lt;/p&gt;
&lt;p data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt; Paradigm shift the PyGears framework offers over traditional HDLs is analog to the difference in paradigm between &lt;a class=&quot;reference external&quot; data-verbosity=&quot;2&quot; hidden=&quot;true&quot; href=&quot;https://en.wikipedia.org/wiki/Object-oriented_programming&quot;&gt;OOP&lt;/a&gt; (Object Oriented Programming) and &lt;a class=&quot;reference external&quot; data-verbosity=&quot;2&quot; hidden=&quot;true&quot; href=&quot;https://en.wikipedia.org/wiki/Functional_programming&quot;&gt;Functional programming&lt;/a&gt;. In OOP, you program in terms of objects, which are in turn formed to enclose certain state and provide operations that depend on that state and can change it. This is very similar to how HDL modules are formed, as discussed earlier in this chapter. On the other hand, in functional programming, you program in terms of functions and types of the data passed between them, which is exactly how you describe hardware with PyGears. It is widely considered that parallel software designs are easier described using functional programming paradigm, so my aim is to show in this blog series that the same holds for the hardware design.&lt;/p&gt;
&lt;p&gt;&lt;span data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;Furthermore, PyGears is written in Python and offers a way to run RTL siulation together with asynchronous Python functions, in which arbitrary functionality for stimulus generation, value checking, logging and gathering statistics. &lt;/span&gt;&lt;span data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt; Some advantages over SystemVerilog are that Python is open-sourced, much more popular, has huge library of packages and has cleaner syntax.&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;why-not-some-of-the-existing-modern-hdls&quot;&gt;
&lt;div hidden data-verbosity=2&gt;
&lt;h2 data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt; Why not some of the existing modern HDLs?&lt;/h2&gt;

&lt;/div&gt;&lt;p data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;I am aware of several other attempts at higher level HDLs, like: &lt;a class=&quot;reference external&quot; data-verbosity=&quot;2&quot; hidden=&quot;true&quot; href=&quot;https://chisel.eecs.berkeley.edu/&quot;&gt;Chisel&lt;/a&gt;, &lt;a class=&quot;reference external&quot; data-verbosity=&quot;2&quot; hidden=&quot;true&quot; href=&quot;http://bluespec.com/&quot;&gt;Bluespec&lt;/a&gt;, &lt;a class=&quot;reference external&quot; data-verbosity=&quot;2&quot; hidden=&quot;true&quot; href=&quot;http://www.clash-lang.org/&quot;&gt;Clash&lt;/a&gt; and &lt;a class=&quot;reference external&quot; data-verbosity=&quot;2&quot; hidden=&quot;true&quot; href=&quot;http://www.myhdl.org/&quot;&gt;MyHDL&lt;/a&gt;. I never dug deeper into these languages, so I’m not able to give an in depth analysis of each of them here. It’s not that I don’t plan to learn them better sometimes, as I’m sure they have many briliant ideas incorporated, it’s just that they didn’t seem to really offer solutions to the problems discussed in the previous chapter. Even Clash, which takes the functional approach (and is written in the most functional language ever), in my opinion missed the opportunity to really raise the level of abstraction, by still dealing with the individual signals (as opposed to the flow-controlled interfaces in PyGears) and thus significantly lowering the composability of the modules. Other languages mentioned here take state-centric path of the traditional HDLs and so I truly feel that PyGears has to offer something better.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;writting-tests-as-a-design-tool&quot;&gt;
&lt;h2&gt;Writting tests as a design tool&lt;/h2&gt;
&lt;p&gt;Usually the hardware implementation effort is split between the design and verification teams, where the design team leaves all the testing to the verification. I think that this is a bad dichotomy and tend to agree with the &lt;a class=&quot;reference external&quot; href=&quot;https://en.wikipedia.org/wiki/Test-driven_development&quot;&gt;TDD&lt;/a&gt; (Test-Driven Development) philosophy which points-out the importance of the developers tests. These are the tests written by the designers continuously during the development, which test each of the functional requirements of the design.&lt;/p&gt;
&lt;p data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;According to the TDD, the implementation of each functional requirement should be performed in three steps: red, green and refactor:&lt;/p&gt;
&lt;ol class=&quot;arabic simple&quot; data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;
&lt;li data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;&lt;p data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;Red: Add tests to verify the functional requirement. Run the tests to check that they fail, which they ought to do since the functionality hasn’t been implemented yet.&lt;/p&gt;&lt;/li&gt;
&lt;li data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;&lt;p data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;Green: Work on the functionality implementation until all the tests pass (new ones as well as the ones testing previously implemented requirements).&lt;/p&gt;&lt;/li&gt;
&lt;li data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;&lt;p data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;Refactor: Clean-up the code without breaking the tests&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For the RISC-V implementation, I plan on treating each instruction in the ISA as a separate functional requirement, so I should have a following flow:&lt;/p&gt;
&lt;ol class=&quot;arabic simple&quot;&gt;
&lt;li&gt;&lt;p&gt;Write a test that feeds the instruction to the processor and checks the memory and register state after the execution against the &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/riscv/riscv-isa-sim/&quot;&gt;Spike&lt;/a&gt; RISC-V ISA simulator (which will serve as a reference model),&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Implement the instruction in hardware and verify that the test passes together with all the tests for the previously implemented instructions,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Refactor the processor implementation.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Besides functional correctness, one additional important processor design quality parameter is its throughput. So, in addition to the functional tests for each of the instructions, I plan to use Vivado to test attainable frequency for my design.&lt;/p&gt;
&lt;p data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;Even though I’m aware of the already proposed architectures for the RISC-V processor (like the one in the &lt;a class=&quot;reference external&quot; data-verbosity=&quot;2&quot; hidden=&quot;true&quot; href=&quot;https://www.amazon.com/Computer-Architecture-Quantitative-Approach-Kaufmann/dp/0128119055&quot;&gt;Computer Architecture: A Quantitative Approach&lt;/a&gt;), I will try to blank out the memory of them, and let the new one, guided by the PyGears principles, arise on its own.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;setup&quot;&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;p&gt;For this series I’ll be working on Ubuntu 18.04. For the detailed description of the tools I’m going to use and how to set them up, please refer to &lt;a class=&quot;reference external&quot; href=&quot;https://bogdanvuk.github.io/pygears/setup.html#setup-pygears-tools&quot;&gt;PyGears tools setup&lt;/a&gt;. You can of course choose an alternative to all these tools (except for the PyGears framework itself I hope). Furthermore, PyGears has been tested to work on Windows and openSUSE as well, so feel free to use the OS of your choice. In short you will need:&lt;/p&gt;
&lt;ol class=&quot;arabic simple&quot;&gt;
&lt;li&gt;&lt;p&gt;PyGears,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;An RTL simulator: I’ll be using mostly Verilator since it is open-source, but I will try to provide an option in the code to run Questa or Cadence simulators as well,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A waveform viewer: I’ll be using GtkWave since again it is open-source, but if you plan on using a proprietary simulator, they will come with a waveform viewer,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A constrained random solver: I’ll try to use &lt;a class=&quot;reference external&quot; href=&quot;http://www.accellera.org/activities/working-groups/systemc-verification&quot;&gt;SCV&lt;/a&gt;. Again proprietary simulators have support for this too,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Various RISC-V tools, for which I will make further posts on how to setup and use.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I’ll be using Spacemacs for editing files and running Python scripts, but I’ll try to test the procedures I layout in blog posts on PyCharm as well.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;logistics&quot;&gt;
&lt;h2&gt;Logistics&lt;/h2&gt;
&lt;p&gt;All the files related to the RISC-V implementation will be placed in &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;examples/riscv&lt;/span&gt;&lt;/code&gt; folder of the PyGears git repository. At the beggining of each blog post, I will state which exact git commit contains code relevant to that post, so that you can get back in history and inspect files at that development stage.&lt;/p&gt;
&lt;p&gt;Notice also a slider at the beginning of the post. It allows you to choose verbosity of the text. I plan to use it for all future posts in a fashion similar to this:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;p&gt;Verbosity level 1: Only as much information as needed to reproduce the results the post is discussing,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Verbosity level 2: Additional details and explanations about each of the steps involved in the discussed procedure,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Verbosity level 3: Various digressions, brain dumps, detailed results of the procedure steps (log files, command outputs), etc.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
</feed>
