<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">PyGears - Posts in RISC-V</title>
  <id>https://www.pygears.org/blog/category/risc-v/atom.xml</id>
  <updated>2018-10-07T00:00:00Z</updated>
  <link href="https://www.pygears.org/" />
  <link href="https://www.pygears.org/blog/category/risc-v/atom.xml" rel="self" />
  <generator uri="http://ablog.readthedocs.org" version="0.9.2">ABlog</generator>
  <entry xml:base="https://www.pygears.org/blog/category/risc-v/atom.xml">
    <title type="text">RISC-V Tools Setup</title>
    <id>https://www.pygears.org/riscv/setup.html</id>
    <updated>2018-10-07T00:00:00Z</updated>
    <published>2018-10-07T00:00:00Z</published>
    <link href="https://www.pygears.org/riscv/setup.html" />
    <author>
      <name>Bogdan Vukobratović</name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;risc-v-tools-setup&quot;&gt;


&lt;script&gt;
 function changeVerbosity(verbosity) {

     document.getElementById(&quot;verbosity_value&quot;).value = verbosity;
     document.getElementById(&quot;verbosity_slider&quot;).value = verbosity;

     var a = document.querySelectorAll('[data-verbosity]');

     for (var i in a) if (a.hasOwnProperty(i)) {
         if (a[i].getAttribute('data-verbosity') &lt;= verbosity) {
             a[i].removeAttribute(&quot;hidden&quot;)
         } else {
             a[i].setAttribute(&quot;hidden&quot;, &quot;true&quot;)
         }
     }
 }
&lt;/script&gt;

&lt;form class=&quot;slidecontainer&quot;&gt;
    &lt;b&gt;Slide to adjust verbosity level&amp;ensp;&lt;/b&gt;
    &lt;input type=&quot;range&quot; min=&quot;1&quot; max=&quot;2&quot; value=&quot;1&quot; name=&quot;verbositySlider&quot; id=&quot;verbosity_slider&quot; onchange=&quot;changeVerbosity(this.value);&quot;&gt;
    &amp;ensp;
    &lt;input type=&quot;number&quot; maxlength=&quot;1&quot; id=&quot;verbosity_value&quot; min=&quot;1&quot; max=&quot;2&quot; value=&quot;1&quot; oninput=&quot;changeVerbosity(this.value);&quot; style=&quot;font-weight: bold&quot;/&gt;
&lt;/form&gt;
&lt;p&gt;Relevant pygears_riscv git commit: &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/bogdanvuk/pygears_riscv/tree/bba9a4afe8d20e26f6aef634bc2651fbf8b71c8e&quot;&gt;pygears_riscv&amp;#64;bba9a4a&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This post only explains the setup procedure for the additional tools needed for the RISC-V development. Installation procedure for the PyGears tools has been discussed in the &lt;a class=&quot;reference internal&quot; href=&quot;../../riscv/introduction.html#riscv-introduction-setup&quot;&gt;&lt;span class=&quot;std std-ref&quot;&gt;previous post&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If I want to approach this project the TDD way, I need to be ready to test the design from the start. Hence, I will start by obtaining the “golden design”, aka “reference model”, aka “test oracle”, depending on the terminology, and setting up the infrastructure to it with PyGears. &lt;span data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt; RISC-V foundation github page offers &lt;/span&gt;&lt;a class=&quot;reference external&quot; data-verbosity=&quot;2&quot; hidden=&quot;true&quot; href=&quot;https://github.com/riscv/riscv-isa-sim/&quot;&gt;Spike&lt;/a&gt;&lt;span data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt; - RISC-V instruction set simulator which implements the RISC-V functional model. There are more simulators listed on the RISC-V &lt;/span&gt;&lt;a class=&quot;reference external&quot; data-verbosity=&quot;2&quot; hidden=&quot;true&quot; href=&quot;https://riscv.org/software-status/&quot;&gt;website&lt;/a&gt;&lt;span data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;, but I’d like to start with the official one. Spike is dependent on some other riscv-tool packages, so I’ll start from &lt;/span&gt;&lt;a class=&quot;reference external&quot; data-verbosity=&quot;2&quot; hidden=&quot;true&quot; href=&quot;https://github.com/riscv/riscv-isa-sim/&quot;&gt;riscv-tools&lt;/a&gt;&lt;span data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt; repo and its setup instructions.&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;highlight-bash notranslate&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install autoconf automake autotools-dev curl libmpc-dev libmpfr-dev libgmp-dev libusb-1.0-0-dev gawk build-essential bison flex texinfo gperf libtool patchutils bc zlib1g-dev device-tree-compiler pkg-config libexpat-dev

&lt;span class=&quot;nb&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;RISCV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/tools/riscv-tools

git clone https://github.com/riscv/riscv-tools.git &lt;span class=&quot;nv&quot;&gt;$RISCV&lt;/span&gt;/_install
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$RISCV&lt;/span&gt;/_install
git submodule update --init --recursive
./build.sh

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /tools/tools.sh
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;# Environment for riscv-tools&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /tools/tools.sh
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;export RISCV=/tools/riscv-tools&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /tools/tools.sh
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;export PATH=\$RISCV/bin:\$PATH&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /tools/tools.sh
&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; /tools/tools.sh
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt; This took a while on my laptop, since whole RISC-V GCC compiler toolchain is being downloaded and built. &lt;/span&gt;&lt;span&gt; Finally, lets try if I can simulate a simple program. &lt;/span&gt;&lt;span data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt; Unfortunately, the example given on the riscv-tools github page is for compiling C code. Since I’m interested in testing individual instructions, compiling from C will make too many hoops in the process. I need to be able to directly specify instructions in assembly and avoid as much boilerplate as possible, i.e. main function call and stack manipulation. I started with the instructions provided in &lt;/span&gt;&lt;a class=&quot;reference external&quot; data-verbosity=&quot;2&quot; hidden=&quot;true&quot; href=&quot;https://github.com/jonesinator/riscv-spike-minimal-assembly/&quot;&gt;riscv-spike-minimal-assembly github repo&lt;/a&gt;&lt;span data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;. &lt;/span&gt;&lt;span&gt; I ended up with the following simple linker script &lt;/span&gt;&lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;bare.ld&lt;/span&gt;&lt;/code&gt;&lt;span&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;highlight-default notranslate&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SECTIONS&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x80000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt; Why am I placing my code at address &lt;/span&gt;&lt;code class=&quot;docutils literal notranslate&quot; data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;&lt;span class=&quot;pre&quot;&gt;0x80000000&lt;/span&gt;&lt;/code&gt;&lt;span data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;? Because nothing else worked. My best guess is that simulator maps RAM at address &lt;/span&gt;&lt;code class=&quot;docutils literal notranslate&quot; data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;&lt;span class=&quot;pre&quot;&gt;0x80000000&lt;/span&gt;&lt;/code&gt;&lt;span data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt; by default and gets angry if you want your code somewhere else. &lt;/span&gt;&lt;span&gt; Next, I created a proof of concept assembly file &lt;/span&gt;&lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;hello.s&lt;/span&gt;&lt;/code&gt;&lt;span&gt;. &lt;/span&gt;&lt;span data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt; It contains the example instruction that I want to test &lt;/span&gt;&lt;code class=&quot;docutils literal notranslate&quot; data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;&lt;span class=&quot;pre&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;a1,&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;span data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt; and some boilerplate needed to play nicely with the Spike simulator:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;highlight-ca65 notranslate&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;; # Very simple assembly program that will cause Spike to terminate gracefully.&lt;/span&gt;

&lt;span class=&quot;kp&quot;&gt;.text&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;.global&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_start&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;_start:&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;;; # The actual instruction I&amp;#39;d like to test.&lt;/span&gt;
&lt;span class=&quot;hll&quot;&gt;  &lt;span class=&quot;n&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;;; # Write the value 1 to tohost, telling Spike to quit with an exit code of 0.&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;la&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tohost&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;sw&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;;; # Spin until Spike terminates the simulation.&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;;; # Expose tohost and fromhost to Spike so we can communicate with it.&lt;/span&gt;
&lt;span class=&quot;kp&quot;&gt;.data&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;.global&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tohost&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;tohost:&lt;/span&gt;   &lt;span class=&quot;kp&quot;&gt;.dword&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;.global&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fromhost&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;fromhost:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;.dword&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt; I learned &lt;/span&gt;&lt;a class=&quot;reference external&quot; data-verbosity=&quot;2&quot; hidden=&quot;true&quot; href=&quot;https://gnu-mcu-eclipse.github.io/toolchain/riscv/&quot;&gt;here&lt;/a&gt;&lt;span data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt; how to tell the compiler which version of the RISC-V ISA to use. Since I’m starting the hardware implementation from scratch, I’m interested in most basic 32-bit ISA version, hence I need to call GCC with &lt;/span&gt;&lt;code class=&quot;docutils literal notranslate&quot; data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;&lt;span class=&quot;pre&quot;&gt;-march=rv32i&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;-mabi=ilp32&lt;/span&gt;&lt;/code&gt;&lt;span data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;. Next, in order to have the code without &lt;/span&gt;&lt;code class=&quot;docutils literal notranslate&quot; data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;&lt;span class=&quot;pre&quot;&gt;main()&lt;/span&gt;&lt;/code&gt;&lt;span data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;, you need to provide the &lt;/span&gt;&lt;code class=&quot;docutils literal notranslate&quot; data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;&lt;span class=&quot;pre&quot;&gt;-nostdlib&lt;/span&gt;&lt;/code&gt;&lt;span data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt; flag too, which was hinted in the answer to &lt;/span&gt;&lt;a class=&quot;reference external&quot; data-verbosity=&quot;2&quot; hidden=&quot;true&quot; href=&quot;https://stackoverflow.com/questions/31390127/how-can-i-compile-c-code-to-get-a-bare-metal-skeleton-of-a-minimal-risc-v-assemb&quot;&gt;this stackoverflow question&lt;/a&gt;&lt;span data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;. &lt;/span&gt;&lt;span&gt; I ended up with the following command to call GCC:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;highlight-bash notranslate&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;riscv64-unknown-elf-gcc -march&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;rv32i -mabi&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ilp32 -nostdlib -T bare.ld hello.s -o hello
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;Execution of this command leaves me with the &lt;code class=&quot;docutils literal notranslate&quot; data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;&lt;span class=&quot;pre&quot;&gt;hello&lt;/span&gt;&lt;/code&gt; elf file in the same directory. In order to see the machine code of the instructions and their places in memory, I can run the dissasembler:&lt;/p&gt;
&lt;div hidden data-verbosity=2&gt;
&lt;div class=&quot;highlight-bash notranslate&quot; data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;riscv64-unknown-elf-objdump -d hello
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;&lt;p data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;which gives me the following output:&lt;/p&gt;
&lt;div hidden data-verbosity=2&gt;
&lt;div class=&quot;highlight-objdump notranslate&quot; data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt; hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;     file format &lt;span class=&quot;s&quot;&gt;elf32-littleriscv&lt;/span&gt;


&lt;span class=&quot;x&quot;&gt; Disassembly of section .text:&lt;/span&gt;

&lt;span class=&quot;x&quot;&gt; 80000000 &amp;lt;_start&amp;gt;:&lt;/span&gt;
&lt;span class=&quot;hll&quot;&gt;&lt;span class=&quot;x&quot;&gt; 80000000:   00100593                li      a1,1&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; 80000004:   00100293                li      t0,1&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt; 80000008:   00000317                auipc   t1,0x0&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt; 8000000c:   01030313                addi    t1,t1,16 # 80000018 &amp;lt;tohost&amp;gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt; 80000010:   00532023                sw      t0,0(t1)&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt; 80000014:   0000006f                j       80000014 &amp;lt;_start+0x14&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;&lt;p&gt;&lt;span data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;Success! The target test instruction is first to be executed, which will simplify my tests. &lt;/span&gt;&lt;span&gt; I can now invoke Spike simulator for the basic 32-bit ISA (&lt;/span&gt;&lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;--isa=rv32i&lt;/span&gt;&lt;/code&gt;&lt;span&gt; option) to test the instruction execution and print the list of the instructions it their execution order (&lt;/span&gt;&lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;-l&lt;/span&gt;&lt;/code&gt;&lt;span&gt; option):&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;highlight-bash notranslate&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;spike -l --isa&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;rv32i hello
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;Command produces output given below. &lt;/span&gt;&lt;span data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt; Log shows that the simulator inserted 5 additional instructions at address &lt;/span&gt;&lt;code class=&quot;docutils literal notranslate&quot; data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;&lt;span class=&quot;pre&quot;&gt;0x1000&lt;/span&gt;&lt;/code&gt;&lt;span data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;, which I guess is the fixed position where the execution starts. Last of these five jumps to my example test instruction, now at address &lt;/span&gt;&lt;code class=&quot;docutils literal notranslate&quot; data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;&lt;span class=&quot;pre&quot;&gt;0xffffffff80000000&lt;/span&gt;&lt;/code&gt;&lt;span data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;? Sign extension I guess?&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;highlight-objdump notranslate&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; core   0: 0x0000000000001000 (0x00000297) auipc   t0, 0x0&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt; core   0: 0x0000000000001004 (0x02028593) addi    a1, t0, 32&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt; core   0: 0x0000000000001008 (0xf1402573) csrr    a0, mhartid&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt; core   0: 0x000000000000100c (0x0182a283) lw      t0, 24(t0)&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt; core   0: 0x0000000000001010 (0x00028067) jr      t0&lt;/span&gt;
&lt;span class=&quot;hll&quot;&gt;&lt;span class=&quot;x&quot;&gt; core   0: 0xffffffff80000000 (0x00100593) li      a1, 1&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; core   0: 0xffffffff80000004 (0x00100293) li      t0, 1&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt; core   0: 0xffffffff80000008 (0x00000317) auipc   t1, 0x0&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt; core   0: 0xffffffff8000000c (0x01030313) addi    t1, t1, 16&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt; core   0: 0xffffffff80000010 (0x00532023) sw      t0, 0(t1)&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt; core   0: 0xffffffff80000014 (0x0000006f) j       pc + 0x0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;It doesn’t matter anyways because it worked! I’ll probably get more insight into Spike as the time passes and figure exactly what’s happening, but it’s enough for the start. I invoked the simulator in interactive debug mode in order to check how the test instruction alters the processor state. The instruction &lt;code class=&quot;docutils literal notranslate&quot; data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;&lt;span class=&quot;pre&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;a1,&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;1&lt;/span&gt;&lt;/code&gt; should load a value of 1 to the register &lt;code class=&quot;docutils literal notranslate&quot; data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;&lt;span class=&quot;pre&quot;&gt;a1&lt;/span&gt;&lt;/code&gt;. Name &lt;code class=&quot;docutils literal notranslate&quot; data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;&lt;span class=&quot;pre&quot;&gt;li&lt;/span&gt;&lt;/code&gt; stands for “load immediate” since it loads to a register a value that is immediately available in the instruction code. The code of this instruction is &lt;code class=&quot;docutils literal notranslate&quot; data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;&lt;span class=&quot;pre&quot;&gt;0x00100593&lt;/span&gt;&lt;/code&gt;, and there it is, the value of 1 in top three nibbles of the code: &lt;code class=&quot;docutils literal notranslate&quot; data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;&lt;span class=&quot;pre&quot;&gt;0x001&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;div hidden data-verbosity=2&gt;
&lt;div class=&quot;highlight-bash notranslate&quot; data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;spike -d --isa&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;rv32i hello
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;&lt;p data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;I issued the following commands in order to test the value of the register &lt;code class=&quot;docutils literal notranslate&quot; data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;&lt;span class=&quot;pre&quot;&gt;a1&lt;/span&gt;&lt;/code&gt; before and after the test instruction execution to observe the instruction effect. This is exactly what I will do when I start hardware implementation, in order to test it against the reference design which is the Spike simulator.&lt;/p&gt;
&lt;div hidden data-verbosity=2&gt;
&lt;div class=&quot;highlight-bash notranslate&quot; data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;: &lt;span class=&quot;k&quot;&gt;until&lt;/span&gt; pc &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; 0xffffffff80000000
: reg &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; a1
0x0000000000001020
: run &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
core   &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;: 0xffffffff80000000 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0x00100593&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; li      a1, &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
: reg &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; a1
0x0000000000000001
: q
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;&lt;div class=&quot;section&quot; id=&quot;invoking-from-python&quot;&gt;
&lt;h2&gt;Invoking from Python&lt;/h2&gt;
&lt;p&gt;I’d like to have at least one test per RISC-V instruction I implement and run them as often as possible. Hence I need them automated. Specifically, my automated tests need to check whether an instruction introduces the same changes to the memory and registers in my design as it does in the Spike simulator. Unfortunately, Spike doesn’t offer an option of executing commands from the script, so I’ll have to run it in the interactive mode and send commands to him live. &lt;span data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt; Luckily, the Python library &lt;/span&gt;&lt;a class=&quot;reference external&quot; data-verbosity=&quot;2&quot; hidden=&quot;true&quot; href=&quot;https://pexpect.readthedocs.io/en/stable/index.html&quot;&gt;pexpect&lt;/a&gt;&lt;span data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt; was created specifically for the task like this. Pexpect will allow me to start Spike from Python, send it some commands and retrieve the responses. I’ll immediately wrap low-level calls to the &lt;/span&gt;&lt;code class=&quot;docutils literal notranslate&quot; data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;&lt;span class=&quot;pre&quot;&gt;pexpect&lt;/span&gt;&lt;/code&gt;&lt;span data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt; library inside a class I’ll name “Spike”, which will provide a high-level interface for querying the memory and register state and stepping through the program. &lt;/span&gt;&lt;span&gt; Let’s put all this functionality inside &lt;/span&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/bogdanvuk/pygears_riscv/blob/bba9a4afe8d20e26f6aef634bc2651fbf8b71c8e/pygears_riscv/spike.py&quot;&gt;pygears_riscv/spike.py&lt;/a&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;Let’s do the Spike class the right way, by using the &lt;a class=&quot;reference external&quot; data-verbosity=&quot;2&quot; hidden=&quot;true&quot; href=&quot;https://docs.python.org/3/reference/datamodel.html#context-managers&quot;&gt;Context Manager&lt;/a&gt; pattern. This pattern asks us to define initialization and cleanup code inside &lt;code class=&quot;docutils literal notranslate&quot; data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;&lt;span class=&quot;pre&quot;&gt;__enter__&lt;/span&gt;&lt;/code&gt; and &lt;code class=&quot;docutils literal notranslate&quot; data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;&lt;span class=&quot;pre&quot;&gt;__exit__&lt;/span&gt;&lt;/code&gt; methods respectively. During the initialization, I’d like to start the Spike simulator, setup some communication parameters and let the simulator run until it reaches the beginning of my set of instructions (first few instructions are injected by the simulator).&lt;/p&gt;
&lt;div hidden data-verbosity=2&gt;
&lt;div class=&quot;highlight-default notranslate&quot; data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Spike&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PROMPT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;: $&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CODE_BASE_ADDRESS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xffffffff80000000&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd_line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd_line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd_line&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__enter__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pexpect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spawnu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd_line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Spike&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PROMPT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setecho&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;until&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__exit__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exc_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exc_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exc_traceback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;&lt;p data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;This allows me to invoke Spike using &lt;code class=&quot;docutils literal notranslate&quot; data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;&lt;span class=&quot;pre&quot;&gt;with&lt;/span&gt;&lt;/code&gt; Python statement:&lt;/p&gt;
&lt;div hidden data-verbosity=2&gt;
&lt;div class=&quot;highlight-default notranslate&quot; data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# This line invokes the initialization routine which opens up&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# the communication line with the Spike simulator&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Spike&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;spike -d --isa=rv32i hello&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Here, within the with block I can interact with the simulator&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Simulator is closed outside the with block&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;&lt;p data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;Also, let’s implement some high-level commands that will be used often:&lt;/p&gt;
&lt;div hidden data-verbosity=2&gt;
&lt;div class=&quot;highlight-default notranslate&quot; data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;until&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;until pc 0 {hex(Spike.CODE_BASE_ADDRESS + address)}&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;pc 0&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Spike&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CODE_BASE_ADDRESS&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;run 1&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;reg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reg_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;reg 0 a&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{reg_id}&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;&lt;p data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;The &lt;code class=&quot;docutils literal notranslate&quot; data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;&lt;span class=&quot;pre&quot;&gt;until()&lt;/span&gt;&lt;/code&gt; method instructs the Spike simulator to run until &lt;code class=&quot;docutils literal notranslate&quot; data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;&lt;span class=&quot;pre&quot;&gt;PC&lt;/span&gt;&lt;/code&gt; reaches a specific address. Since my code starts (for some reason) at address &lt;code class=&quot;docutils literal notranslate&quot; data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;&lt;span class=&quot;pre&quot;&gt;0xffffffff80000000&lt;/span&gt;&lt;/code&gt;, I’ll make &lt;code class=&quot;docutils literal notranslate&quot; data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;&lt;span class=&quot;pre&quot;&gt;until()&lt;/span&gt;&lt;/code&gt; accept addressess in form of the offset to this base address, which will reduce the noise of always needing to write such large numbers.&lt;/p&gt;
&lt;p data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;The &lt;code class=&quot;docutils literal notranslate&quot; data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;&lt;span class=&quot;pre&quot;&gt;pc()&lt;/span&gt;&lt;/code&gt; method queries the current value of the &lt;code class=&quot;docutils literal notranslate&quot; data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;&lt;span class=&quot;pre&quot;&gt;PC&lt;/span&gt;&lt;/code&gt;, but also returns only the offset to the code base address. The &lt;code class=&quot;docutils literal notranslate&quot; data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;&lt;span class=&quot;pre&quot;&gt;step()&lt;/span&gt;&lt;/code&gt; method instructs the simulator to run the next instruction, and the &lt;code class=&quot;docutils literal notranslate&quot; data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;&lt;span class=&quot;pre&quot;&gt;reg()&lt;/span&gt;&lt;/code&gt; method retrieves the state of a specific register.&lt;/p&gt;
&lt;p&gt;Now, I can interact with Spike on a pretty high level:&lt;/p&gt;
&lt;div class=&quot;highlight-default notranslate&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;spike&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Spike&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Spike&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;spike -d --isa=rv32i hello&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;A1 value before: &amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;A1 value after:  &amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;Which gives me the same results as before when I interacted with the simulator manually. The script above prints:&lt;/p&gt;
&lt;div hidden data-verbosity=2&gt;
&lt;div class=&quot;highlight-default notranslate&quot; data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;mh&quot;&gt;0x1020&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;A1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;after&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;mh&quot;&gt;0x1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="https://www.pygears.org/blog/category/risc-v/atom.xml">
    <title type="text">RISC-V Blog Series Introduction</title>
    <id>https://www.pygears.org/riscv/introduction.html</id>
    <updated>2018-10-06T00:00:00Z</updated>
    <published>2018-10-06T00:00:00Z</published>
    <link href="https://www.pygears.org/riscv/introduction.html" />
    <author>
      <name>Bogdan Vukobratović</name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;risc-v-blog-series-introduction&quot;&gt;


&lt;script&gt;
 function changeVerbosity(verbosity) {

     document.getElementById(&quot;verbosity_value&quot;).value = verbosity;
     document.getElementById(&quot;verbosity_slider&quot;).value = verbosity;

     var a = document.querySelectorAll('[data-verbosity]');

     for (var i in a) if (a.hasOwnProperty(i)) {
         if (a[i].getAttribute('data-verbosity') &lt;= verbosity) {
             a[i].removeAttribute(&quot;hidden&quot;)
         } else {
             a[i].setAttribute(&quot;hidden&quot;, &quot;true&quot;)
         }
     }
 }
&lt;/script&gt;

&lt;form class=&quot;slidecontainer&quot;&gt;
    &lt;b&gt;Slide to adjust verbosity level&amp;ensp;&lt;/b&gt;
    &lt;input type=&quot;range&quot; min=&quot;1&quot; max=&quot;2&quot; value=&quot;1&quot; name=&quot;verbositySlider&quot; id=&quot;verbosity_slider&quot; onchange=&quot;changeVerbosity(this.value);&quot;&gt;
    &amp;ensp;
    &lt;input type=&quot;number&quot; maxlength=&quot;1&quot; id=&quot;verbosity_value&quot; min=&quot;1&quot; max=&quot;2&quot; value=&quot;1&quot; oninput=&quot;changeVerbosity(this.value);&quot; style=&quot;font-weight: bold&quot;/&gt;
&lt;/form&gt;
&lt;p&gt;Welcome to the blog series in which I’ll be implementing the &lt;a class=&quot;reference external&quot; href=&quot;https://riscv.org/risc-v-isa/&quot;&gt;RISC-V ISA&lt;/a&gt; (Instruction Set Architecture) in hardware using functional approach with &lt;a class=&quot;reference external&quot; href=&quot;https://www.pygears.org/index.html&quot;&gt;PyGears&lt;/a&gt;. My aim is to show how PyGears offers a way to build hardware in an incremental, evolutionary fashion, where the architecture, implementation and the verification environment evolve together, as opposed to the standard approach where these steps mostly happen in sequence. Developing hardware in such an &lt;a class=&quot;reference external&quot; href=&quot;https://en.wikipedia.org/wiki/Agile_software_development&quot;&gt;agile&lt;/a&gt; way offers many benefits to the hardware design process, with some of them being that:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;p&gt;I don’t need to take into the account all the requirements from the start in order to design the architecture before I start the implementation. &lt;span data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt; This means that I will sooner start the implementation and have feedback about my architectural choices and thus avoid catching architectural errors late, which are then most expensive to fix.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I can get an &lt;a class=&quot;reference external&quot; href=&quot;https://en.wikipedia.org/wiki/Minimum_viable_product&quot;&gt;MVP&lt;/a&gt; (Minimum Viable Product) early, which means that I can start &lt;a class=&quot;reference external&quot; href=&quot;http://softwaretestingfundamentals.com/system-testing/&quot;&gt;system testing&lt;/a&gt; early and try to catch errors in the design’s &lt;a class=&quot;reference external&quot; href=&quot;https://en.wikipedia.org/wiki/Functional_requirement&quot;&gt;functional requirements&lt;/a&gt; as early as possible.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I can maintain my MVP, so that the customer can try to use the hardware at different stages throughout the development. &lt;span data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt; This offers him a chance to shorten the time-to-market and may provide me with the valuable feedback. This can again lead to the change to the requirements which I would like to have as early as possible.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;“Hardware” and “requirements change” are two things that were not meant to go together, but the electronics industry is developing at an ever accelerating pace so this needs to change. &lt;span data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt; This is also recognized by the very authors of the RISC-V ISA, and summed up in their paper &lt;/span&gt;&lt;a class=&quot;reference external&quot; data-verbosity=&quot;2&quot; hidden=&quot;true&quot; href=&quot;https://people.eecs.berkeley.edu/~bora/Journals/2016/IEEEMicro16.pdf&quot;&gt;AN AGILE APPROACH TO BUILDING RISC-V MICROPROCESSORS&lt;/a&gt;&lt;span data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;why-pygears&quot;&gt;
&lt;h2&gt;Why PyGears?&lt;/h2&gt;
&lt;p data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;Traditional HDLs and design methodologies built around them are ill-suited for building larger hardware systems, because they offer very few means of abstraction, besides grouping the implementation into modules. Modules are furthermore quite often formed in the wrong way, by bundling various functionalities together because they operate on the same data, even though they serve different purposes. Think big clunky control path state machines with many outputs which are usually the major source of bugs and a major obstacle for adding new features.&lt;/p&gt;
&lt;div class=&quot;figure align-center&quot; data-verbosity=&quot;2&quot; hidden=&quot;true&quot; id=&quot;id1&quot;&gt;
&lt;img alt=&quot;../../_images/fsm.png&quot; data-verbosity=&quot;2&quot; hidden=&quot;true&quot; src=&quot;../../_images/fsm.png&quot; style=&quot;width: 312.0px; height: 326.0px;&quot; /&gt;
&lt;p class=&quot;caption&quot; data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;&lt;span class=&quot;caption-text&quot; data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;Image from &lt;a class=&quot;reference external&quot; data-verbosity=&quot;2&quot; hidden=&quot;true&quot; href=&quot;http://ece-research.unm.edu/jimp/codesign/slides/microprogramming.pdf&quot;&gt;&amp;lt;http://ece-research.unm.edu/jimp/codesign/slides/microprogramming.pdf&amp;gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;Each of these outputs is probably computed by a functionality that deserves its own module, its own little abstraction. Why are they than being sucked into state machine module monsters? Usually because we either believe that it leads to a more optimized design, or we are afraid of synchronization issues. But wire is a wire even if it leaves the module boundaries, and decent hardware synthesis tools offer inter-module optimization, so we lose next to nothing by factoring out the functionality. As for the synchronization, putting everything in a single module just offers a false sense of security and sweeps the problem under the rug until later when functionality piles up inside the module and pipelining becomes a nightmare, not to mention dealing with synchronization issues between such complex modules.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Since the biggest issue with maintaining a large hardware design is synchronization (as with any other massively parallel system: think multithreading in software), PyGears tries to face it upfront by forcing each module to implement a &lt;/span&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://www.pygears.org/gears.html#one-interface&quot;&gt;flow-controlled interface&lt;/a&gt;&lt;span&gt;, which turns modules into “gears” in PyGears terminology (checkout this &lt;/span&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://www.pygears.org/gears.html&quot;&gt;quick introduction to gears&lt;/a&gt;&lt;span&gt;). &lt;/span&gt;&lt;span data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt; As much as it may seem as an overkill in the beginning, it usually pays-off later, and is easily optimized-away by the hardware synthesis tools if not really needed. &lt;/span&gt;&lt;span&gt; Gears are not built around the state, but are formed to group and abstract some functionality, while the state is embedded in the data sent between the gears. This further alleviates the synchronization problem and pipelined architectures arise naturally, as I intend to show while implementing RISC-V ISA.&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;../../_images/tikz-fb469c944d72dd32a859ee29fb8934cda7c66991.png&quot; alt=&quot;\draw[thick] (0, 0) \gear{10}{2}{2.4}{16}{2}{prod}{Producer};
\draw[thick,xshift=120mm] \gear{10}{2}{2.4}{16}{2}{cons}{Consumer};
\draw[-Triangle,line width=2mm] (3, 1) -- node[above] {Data [T]} ++(6, 0);
\draw[-Triangle,line width=0.5mm] (3, -0.5) -- node[above] {Valid} ++(6, 0);
\draw[Triangle-,line width=0.5mm] (3, -1.5) -- node[above] {Ready} ++(6, 0);
\node (A) [cylinder, draw,minimum height=6.8cm,minimum width=3.8cm, label=below:DTI] at (6,0) {};&quot; /&gt;&lt;/p&gt;
&lt;p class=&quot;caption&quot;&gt;DTI - Data Transfer Interface&lt;/p&gt;&lt;/div&gt;&lt;p&gt;&lt;span&gt;Gears are also assigned &lt;/span&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://www.pygears.org/gears.html#powerful-type-system&quot;&gt;data types&lt;/a&gt;&lt;span&gt; for their interfaces, which dramatically eases their composition. If gears are easily &lt;/span&gt;&lt;strong&gt;composable&lt;/strong&gt;&lt;span&gt;, then they can be used in wider variety of situations, hence they are &lt;/span&gt;&lt;strong&gt;reusable&lt;/strong&gt;&lt;span&gt;. It makes sense then to create well-thought-out and well-tested &lt;/span&gt;&lt;strong&gt;libraries of gears&lt;/strong&gt;&lt;span&gt; (like &lt;/span&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/bogdanvuk/pygears/tree/master/pygears/cookbook&quot;&gt;cookbook&lt;/a&gt;&lt;span&gt; and &lt;/span&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/bogdanvuk/pygears/tree/master/pygears/common&quot;&gt;common&lt;/a&gt;&lt;span&gt; libraries shipped with PyGears), which pays off in the long run by reducing the design time and reducing the number of bugs. &lt;/span&gt;&lt;span data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt; Absence of such libraries in other HDLs, speaks for itself.&lt;/span&gt;&lt;/p&gt;
&lt;p data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt; Paradigm shift the PyGears framework offers over traditional HDLs is analog to the difference in paradigm between &lt;a class=&quot;reference external&quot; data-verbosity=&quot;2&quot; hidden=&quot;true&quot; href=&quot;https://en.wikipedia.org/wiki/Object-oriented_programming&quot;&gt;OOP&lt;/a&gt; (Object Oriented Programming) and &lt;a class=&quot;reference external&quot; data-verbosity=&quot;2&quot; hidden=&quot;true&quot; href=&quot;https://en.wikipedia.org/wiki/Functional_programming&quot;&gt;Functional programming&lt;/a&gt;. In OOP, you program in terms of objects, which are in turn formed to enclose certain state and provide operations that depend on that state and can change it. This is very similar to how HDL modules are formed, as discussed earlier in this chapter. On the other hand, in functional programming, you program in terms of functions and types of the data passed between them, which is exactly how you describe hardware with PyGears. It is widely considered that parallel software designs are easier described using functional programming paradigm, so my aim is to show in this blog series that the same holds for the hardware design.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Furthermore, PyGears is written in Python and offers a way to run RTL simulation together with asynchronous Python functions, in which arbitrary functionality for stimulus generation, value checking, logging and gathering statistics. &lt;/span&gt;&lt;span data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt; Some advantages over SystemVerilog are that Python is open-sourced, much more popular, has huge library of packages and has cleaner syntax.&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;why-not-some-of-the-existing-modern-hdls&quot;&gt;
&lt;div hidden data-verbosity=2&gt;
&lt;h2 data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt; Why not some of the existing modern HDLs?&lt;/h2&gt;

&lt;/div&gt;&lt;p data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;I am aware of several other attempts at higher level HDLs, like: &lt;a class=&quot;reference external&quot; data-verbosity=&quot;2&quot; hidden=&quot;true&quot; href=&quot;https://chisel.eecs.berkeley.edu/&quot;&gt;Chisel&lt;/a&gt;, &lt;a class=&quot;reference external&quot; data-verbosity=&quot;2&quot; hidden=&quot;true&quot; href=&quot;http://bluespec.com/&quot;&gt;Bluespec&lt;/a&gt;, &lt;a class=&quot;reference external&quot; data-verbosity=&quot;2&quot; hidden=&quot;true&quot; href=&quot;http://www.clash-lang.org/&quot;&gt;Clash&lt;/a&gt; and &lt;a class=&quot;reference external&quot; data-verbosity=&quot;2&quot; hidden=&quot;true&quot; href=&quot;http://www.myhdl.org/&quot;&gt;MyHDL&lt;/a&gt;. I never dug deeper into these languages, so I’m not able to give an in depth analysis of each of them here. It’s not that I don’t plan to learn them better sometimes, as I’m sure they have many brilliant ideas incorporated, it’s just that they didn’t seem to really offer solutions to the problems discussed in the previous chapter. Even Clash, which takes the functional approach, in my opinion missed the opportunity to really raise the level of abstraction, by still dealing with the individual signals (as opposed to the flow-controlled interfaces in PyGears) and thus significantly lowering the composability of the modules. Other languages mentioned here take state-centric path of the traditional HDLs and so I truly feel that PyGears has to offer something better.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;writing-tests-as-a-design-tool&quot;&gt;
&lt;h2&gt;Writing tests as a design tool&lt;/h2&gt;
&lt;p&gt;Usually the hardware implementation effort is split between the design and verification teams, where the design team leaves all the testing to the verification. I think that this is a bad dichotomy and tend to agree with the &lt;a class=&quot;reference external&quot; href=&quot;https://en.wikipedia.org/wiki/Test-driven_development&quot;&gt;TDD&lt;/a&gt; (Test-Driven Development) philosophy which points-out the importance of the developers tests. These are the tests written by the designers continuously during the development, which test each of the functional requirements of the design.&lt;/p&gt;
&lt;p data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;According to the TDD, the implementation of each functional requirement should be performed in three steps: red, green and refactor:&lt;/p&gt;
&lt;ol class=&quot;arabic simple&quot; data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;
&lt;li data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;&lt;p data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;Red: Add tests to verify the functional requirement. Run the tests to check that they fail, which they ought to do since the functionality hasn’t been implemented yet.&lt;/p&gt;&lt;/li&gt;
&lt;li data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;&lt;p data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;Green: Work on the functionality implementation until all the tests pass (new ones as well as the ones testing previously implemented requirements).&lt;/p&gt;&lt;/li&gt;
&lt;li data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;&lt;p data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;Refactor: Clean-up the code without breaking the tests&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For the RISC-V implementation, I plan on treating each instruction in the ISA as a separate functional requirement, so I should have a following flow:&lt;/p&gt;
&lt;ol class=&quot;arabic simple&quot;&gt;
&lt;li&gt;&lt;p&gt;Write a test that feeds the instruction to the processor and checks the memory and register state after the execution against the &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/riscv/riscv-isa-sim/&quot;&gt;Spike&lt;/a&gt; RISC-V ISA simulator (which will serve as a reference model),&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Implement the instruction in hardware and verify that the test passes together with all the tests for the previously implemented instructions,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Refactor the processor implementation.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Besides functional correctness, one additional important processor design quality parameter is its throughput. So, in addition to the functional tests for each of the instructions, I plan to use Vivado to test attainable frequency for my design.&lt;/p&gt;
&lt;p data-verbosity=&quot;2&quot; hidden=&quot;true&quot;&gt;Even though I’m aware of the already proposed architectures for the RISC-V processor (like the one in the &lt;a class=&quot;reference external&quot; data-verbosity=&quot;2&quot; hidden=&quot;true&quot; href=&quot;https://www.amazon.com/Computer-Architecture-Quantitative-Approach-Kaufmann/dp/0128119055&quot;&gt;Computer Architecture: A Quantitative Approach&lt;/a&gt;), I will try to blank out the memory of them, and let the new one, guided by the PyGears principles, arise on its own.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;setup&quot;&gt;
&lt;span id=&quot;riscv-introduction-setup&quot;&gt;&lt;/span&gt;&lt;h2&gt;Setup&lt;/h2&gt;
&lt;p&gt;For this series I’ll be working on Ubuntu 18.04. For the detailed description of the tools I’m going to use and how to set them up, please refer to &lt;a class=&quot;reference external&quot; href=&quot;https://www.pygears.org/setup.html#setup-pygears-tools&quot;&gt;PyGears tools setup&lt;/a&gt;. You can of course choose an alternative to all these tools (except for the PyGears framework itself I hope). Furthermore, PyGears has been tested to work on Windows and openSUSE as well, so feel free to use the OS of your choice. In short you will need:&lt;/p&gt;
&lt;ol class=&quot;arabic simple&quot;&gt;
&lt;li&gt;&lt;p&gt;PyGears,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;An RTL simulator: I’ll be using mostly Verilator since it is open-source, but I will try to provide an option in the code to run Questa or Cadence simulators as well,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A waveform viewer: I’ll be using GtkWave since again it is open-source, but if you plan on using a proprietary simulator, they will come with a waveform viewer,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A constrained random solver: I’ll try to use &lt;a class=&quot;reference external&quot; href=&quot;http://www.accellera.org/activities/working-groups/systemc-verification&quot;&gt;SCV&lt;/a&gt;. Again proprietary simulators have support for this too,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Various RISC-V tools, for which I will make further posts on how to setup and use.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I’ll be using Spacemacs for editing files and running Python scripts, but I’ll try to test the procedures I layout in blog posts on PyCharm as well.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;logistics&quot;&gt;
&lt;h2&gt;Logistics&lt;/h2&gt;
&lt;p&gt;All the files related to the RISC-V implementation will be pyblished inside &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/bogdanvuk/pygears_riscv&quot;&gt;pygears_riscv&lt;/a&gt; git repository. At the beginning of each blog post, I will state which exact git commit contains code relevant to that post, so that you can get back in history and inspect files at that development stage. Before you can run the scripts from the &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;pygears_riscv&lt;/span&gt;&lt;/code&gt; repository, you need to set it up:&lt;/p&gt;
&lt;div class=&quot;highlight-bash notranslate&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/bogdanvuk/pygears_riscv.git

&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; pygears_riscv

python setup.py develop
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Notice also a slider at the beginning of the post. It allows you to choose the verbosity of the text. I plan to use it for all future posts in a fashion similar to this:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;p&gt;Verbosity level 1: Only as much information as needed to reproduce the results the post is discussing,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Verbosity level 2: Additional details and explanations about each of the steps involved in the discussed procedure,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Verbosity level 3: Various digressions, brain dumps, detailed results of the procedure steps (log files, command outputs), etc.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
</feed>
