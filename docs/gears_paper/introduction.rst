.. _introduction:

Introduction
============

RTL methodology is still a primary method for describing digital hardware systems, usually via some variation of the Finite State Machine with Datapath (FSMD) model :cite:`chu2006rtl`. The FSMD intermediate model provides a way of translating sequential algorithms into a hardware description consisting of: a dataflow which implements data transformations, and a control flow (described using a FSM) which controls under which circumstances the transformations are applied. However, for real world examples, the obtained control flow FSM can be quite complex, and RTL methodology offers very few guidelines on how to efficiently refactor the design into smaller manageable units. Manipulating a complex FSM (like debugging, adding a new feature, pipelining, etc.) can thus offer a significant challenge. Furthermore, complex modules are hard to reuse and thoroughly test. 

There are many attempts at providing an alternative to the RTL :cite:`nane2016survey`. They usually focus on a specific design domain like: streaming systems :cite:`serot2013caph,gupta2003spark`, or describing the design in form of concurrent FSMs :cite:`nikhil2004bluespec` via so-called guarded atomic actions. These tools can be valuable when the task at hand matches the domain they support, but they offer no benefits outside of it. For example, dataflow dominant designs, like DSP algorithms, are not easily described using guarded atomic actions, and stream programming model is not well suited for a control flow heavy design like a microprocessor.

Next, there are numerous methods that propose describing hardware in a procedural languages like C, and then offer automated tools to synthesize the procedural description into a standard HDL :cite:`VivadoHLS,villarreal2010designing,gupta2003spark`. These have only had a limited success and are also usually targeted for a specific domain, like streaming applications.

In this paper, we introduce Gears, a novel hardware design methodology that aims to complement the traditional approach by imposing additional constraints on the hardware modules being designed. Authors have recognized that the lack of composability of the modules generated by the traditional methodologies significantly increases the complexity of the hardware design in general. Gears requires the use of a simple handshake interface called DTI for all communication between modules, which allows for them to be viewed as mathematical objects from Category theory :cite:`awodey2010category`, which in turn provides a rich set of tools for composing such modules. Ease of module compositions allows for factoring the design into smaller units, which are easier to write, test and reuse, which in turn enables forming comprehensible, well-tested libraries. This finally leads to significantly reduced efforts when designing hardware with such libraries.   

Regarding the hardware-description languages, Verilog and VHDL are still by far the most commonly used. These languages were originally designed to develop hardware simulation models, and only later did hardware synthesis tools provide support to generate hardware from subsets of these languages. Additionally, these languages have very few means of combination and abstraction compared to modern programming languages, which further reduces the composability of described hardware modules. SystemVerilog was created later as an extension of Verilog, but mainly improved upon its verification capabilities.

In an attempt to provide an alternative to the traditional hardware-description languages, many different programming languages have been re-purposed for the task of the hardware design, like: Scala :cite:`bachrach2012chisel,SpinalHDL`, Haskell :cite:`baaij2010c`, Python :cite:`decaluwe2004myhdl`, etc. While these languages offer higher level constructs that do facilitate certain aspects of describing the hardware, they still rely on the traditional RTL methodology, and as such do not raise the abstraction level at which the hardware is designed.

The Gears methodology can be exercised with any hardware-description language, with some of them being more suitable then others, like SpinalHDL :cite:`SpinalHDL` with its generic Stream interfaces which are equivalent to the DTI. Nevertheless, we developed PyGears, a Python framework for hardware description that is specifically designed to express composition of the modules adhering to the Gears methodology in a most elegant and natural way.
