{%- import 'snippet.j2' as snippet -%}

module {{module_name}} #(
  parameter W_CTRL     = {{bitw(intfs|isinput|length)}},
{% for i in intfs %}
  parameter {{i['param']}}     = {{i['width']}}{{ "," if not loop.last }}
{% endfor -%}
)
(
    input clk,
    input rst,
{{snippet.intf_list(intfs)|indent(4, True)}}
);

   typedef struct packed {
      logic [W_CTRL-1:0] ctrl;
      logic [W_DOUT-W_CTRL-1:0] data;
   } dout_t;

   dout_t dout_s;

   logic [{{intfs|length}}-2:0] flag, flag_reg;
   logic handshake;
   assign handshake = dout.dvalid && dout.dready;

   always_comb begin
      flag = 0;
      dout_s.ctrl = 0;
      dout_s.data = din0.data;
      dout.eot = 0;
      dout.dvalid = 1'b0;
{% for i in intfs|isinput %}
      {{i['name']}}.dready = 1'b0;
{% endfor %}

      if(din0.dvalid && (!flag_reg || flag_reg[0])) begin
         dout.dvalid = din0.dvalid;
         din0.dready = dout.dready;
         flag[0] = 1;
{% for i in intfs[1:]|isinput %}
      end else if ({{i['name']}}.dvalid && (!flag_reg || flag_reg[{{loop.index}}])) begin
         dout_s.data = {{i['name']}}.data;
         dout.dvalid = {{i['name']}}.dvalid;
         {{i['name']}}.dready = dout.dready;
         dout_s.ctrl = {{loop.index}};
         flag[{{loop.index}}] = 1;
{% endfor %}
      end
   end

   always_ff @(posedge clk) begin
      if (rst | handshake) begin
         flag_reg <= 0;
      end else begin
         flag_reg <= flag;
      end
   end

   assign dout.data = dout_s;

endmodule
