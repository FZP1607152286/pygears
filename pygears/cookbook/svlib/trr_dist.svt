{%- import 'snippet.j2' as snippet -%}

{% call snippet.gear_module(module_name, intfs, comment) %}

{% set typeof = import_from('pygears.typing', 'typeof') %}
{% set Queue = import_from('pygears.typing', 'Queue') %}

   localparam DOUT_NUM = {{intfs|length - 1}};
   localparam DIN_LVL  = {{intfs[0]['type'].lvl}};

   localparam TRR_LVL = {{params['lvl']}};

  {% for i in intfs %}
   {{ svgen_typedef(i['local_type'], i['name'])|indent(4, False) }}
  {% endfor %}

   logic [DOUT_NUM-1:0]         valid_array;
   logic [DOUT_NUM-1:0]         ready_array;
   logic [$clog2(DOUT_NUM)-1:0] cnt_s;
   logic switch_condition;
   logic handshake;
   logic cnt_rst;
   din_t din_s;
{% for i in intfs[1:] %}
   {{i['name']}}_t {{i['name']}}_s;
{% endfor %}

   assign handshake = din.valid & din.ready;
   assign din_s = din.data;

{% if typeof(intfs[-1]['type'], Queue) %}
   localparam DOUT_LVL = {{intfs[-1]['type'].lvl}};
  {% for i in intfs[1:] %}
   assign {{i['name']}}_s.data = din_s.data;


   if (DIN_LVL > TRR_LVL+1) begin
      if (TRR_LVL > 0) begin
         assign {{i['name']}}_s.eot = {din_s.eot[DIN_LVL-1:TRR_LVL+1], din_s.eot[TRR_LVL-1:0]};
      end else begin
         assign {{i['name']}}_s.eot = {din_s.eot[DIN_LVL-1:TRR_LVL+1]};
      end
   end else begin
      assign {{i['name']}}_s.eot = din_s.eot[TRR_LVL-1:0];
   end

  {% endfor %}
{% else %}
  {% for i in intfs[1:] %}
   assign {{i['name']}}_s = din_s.data;
  {% endfor %}
{% endif %}

{% for i in intfs[1:] %}
   assign {{i['name']}}.data = {{i['name']}}_s;
   assign {{i['name']}}.valid = valid_array[{{loop.index-1}}];
   assign ready_array[{{loop.index-1}}] = {{i['name']}}.ready;
{% endfor %}

   generate
      for (genvar i = 0; i < DOUT_NUM; i++) begin
         assign valid_array[i] = (i == cnt_s) && din.valid;
      end
   endgenerate
   assign din.ready = ready_array[cnt_s];

   assign cnt_rst = rst | (handshake & (&din_s.eot[TRR_LVL:0]));

{% if params['lvl'] == 0 %}
   assign switch_condition = 1;
{% else %}
   assign switch_condition = &din_s.eot[TRR_LVL-1:0];
{% endif %}

   always_ff @(posedge clk) begin
      if (cnt_rst) begin
         cnt_s <= '0;
      end else begin
         if (handshake & switch_condition) begin
            cnt_s <= cnt_s + 1;
         end
      end
   end
{% endcall %}
