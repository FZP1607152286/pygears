{%- import 'snippet.j2' as snippet -%}
{% set py = import_('builtins') %}
{% call snippet.gear_module(module_name, intfs, comment) %}

    {{snippet.intf_typedef(_din, depth=0)}}

{% for i in (intfs|isoutput) %}
  {% if _din_t.data.width > 0 and i['width'] > 0 %}
    assign {{i['name']}}_data = din_s_data[{{i['width']-1}}:0];
  {% else %}
    assign {{i['name']}}_data = 1'bx;
  {% endif %}
{% endfor %}

{%- set output_intfs = intfs|isoutput %}
{%- set mapped_dout_num = py.max(params['mapping'].values()) + 1 %}

    always @*
    begin
        din_ready = 1'bx;

        if (din_valid) begin
            case(din_s_ctrl)
{% for key, iout in params['mapping'].items() %}
                {{key}} : begin
                    din_ready = {{output_intfs[iout]['name']}}_ready;
                end
{% endfor %}
                default: begin
{% if len(_din_t.types) > mapped_dout_num %}
                    din_ready = {{output_intfs[-1]['name']}}_ready;
{% else %}
                    din_ready = 1'bx;
{% endif %}
                end
            endcase
        end
    end

    always @*
    begin
{% for i in (intfs|isoutput) %}
        {{i['name']}}_valid = 0;
{% endfor %}

        if (din_valid) begin
            case(din_s_ctrl)
{% for key, iout in params['mapping'].items() %}
                {{key}} : begin
                    {{output_intfs[iout]['name']}}_valid = din_valid;
                end
{% endfor %}
                default: begin
{% for i in (intfs|isoutput) %}
                    {{i['name']}}_valid = 1'bx;
{% endfor %}
{% if len(_din_t.types) > mapped_dout_num %}
                    {{output_intfs[-1]['name']}}_valid = 1;
{% endif %}
                end
            endcase
        end
    end

{% endcall %}
