{%- import 'snippet.j2' as snippet -%}
{% call snippet.module_with_intf_structs(module_name, intfs, intfs, comment) %}

    wire handshake;
    reg din_valid_sel;

    assign handshake = dout_valid && dout_ready;

    always @*
    begin
{% for i in intfs[1:-1] %}
        {{i['name']}}_ready = {{i['name']}}_valid ? 0 : dout_ready;
{% endfor %}
        if (ctrl_valid) begin
            case( ctrl_data )
{% for key, iout in params['_full_mapping'].items() %}
{% set i = intfs[1:-1][iout] %}
                {{key}} : begin
                    {{i['name']}}_ready = {{i['name']}}_valid ? handshake : dout_ready;
                end
{% endfor %}
                default: begin
{% for i in intfs[1:-1] %}
                    {{i['name']}}_ready = dout_ready;
{% endfor %}
                end
            endcase
        end
    end

    always @*
    begin
        dout_s_data = { {{int(_dout_t.data)}} {1'bx}};
        din_valid_sel = 0;
        if (ctrl_valid) begin
            case( ctrl_data )
{% for key, iout in params['_full_mapping'].items() %}
{% set i = intfs[1:-1][iout] %}
                {{key}} : begin
                    din_valid_sel = {{i['name']}}_valid;
  {% if i['width'] > 0 %}
                    dout_s_data[{{i['width']-1}}:0] = {{i['name']}}_s;
  {% endif %}
                end
{% endfor %}
                default: begin
                    din_valid_sel = 1'bx;
                end
            endcase
        end
    end

    assign ctrl_ready = ctrl_valid ? handshake : dout_ready;
    assign dout_s_ctrl = ctrl_s;
    assign dout_valid = ctrl_valid && din_valid_sel;

{% endcall %}
