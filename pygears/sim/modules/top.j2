{%- import 'snippets.j2' as snippets -%}
`ifndef TOP_SV
`define TOP_SV

parameter CMD_SYS_RESET  = 32'h8000_0000;
parameter CMD_SET_DATA   = 32'h4000_0000;
parameter CMD_RESET      = 32'h2000_0000;
parameter CMD_FORWARD    = 32'h1000_0000;
parameter CMD_CYCLE      = 32'h0800_0000;
parameter CMD_READ       = 32'h0400_0000;
parameter CMD_ACK        = 32'h0200_0000;

parameter ACTIVITY_TIMEOUT = 1000;

module top;

   `include "socket_macros.svh"
   `include "dti_verif_if.sv"

   import sock::*;

   logic clk;
   logic rst;
   chandle synchro_handle;
{{snippets.hook_unroll(hooks, "module_init")}}

{% for s in structs %}
{{s|indent(3, true)}}
{% endfor -%}

{% for intf in intfs %}
   dti_verif_if#({{intf['name']}}_t) {{intf['name']}}_vif (clk, rst);
   dti#({{intf['width']}}) {{intf['name']}} ();
{% endfor %}

   initial begin
      fork
         begin
            #0.5s; 
            $warning("watchdog timer expired. killing test...");
            sock_close(synchro_handle);
            $finish();
         end
      join
      sock_close(synchro_handle);
      $finish();
   end

   initial begin
      int cnt;
      cnt = 0;
      forever begin
         @(posedge clk);
         if ({{ intfs|isoutput|keymap("name")|format_list("({0}_vif.valid && {0}.ready)")|join(" && ") }}) begin
            cnt = 0;
         end else begin
            cnt++;
         end

         if (cnt == ACTIVITY_TIMEOUT) begin
            $display("Activity monitor timeout");
            $finish();
            break;
         end
      end
   end

   task drive_reset(int duration);
      fork
         if (rst != 1) begin
            rst = 1;
            repeat(duration) @(negedge clk);
            rst = 0;
         end
      join_none
   endtask

   initial begin
      int ret;
      bit[31:0] data;
      bit[31:0] status;

{% for intf in intfs %}
      bit[{{intf['width']-1}}:0] {{intf['name']}}_data;
{% endfor %}

      `verif_info($sformatf("Waiting for socket"), 2);
      {# synchro_handle = sock_open("tcp://localhost:{{port}}", "_synchro"); #}
      synchro_handle = sock_open("unix:///tmp/socket_test.s", "_synchro");

{% for intf in intfs %}
      {{intf['name']}}_vif.name = "{{intf['name']}}";
  {% if intf['modport'] == 'producer' %}
      {{intf['name']}}_vif.ready <= 1'b0;
  {% else %}
      {{intf['name']}}_vif.valid <= 1'b0;
  {% endif %}
{% endfor %}

      `verif_info($sformatf("Socket open"), 2);
      `verif_info($sformatf("Reset from %0t", $time), 2);
      #15;
      `verif_info($sformatf("Reset to %0t", $time), 2);
      forever begin
         {# do begin #}
         `verif_info($sformatf("Wait for data"), 2);
         ret = sock_get_bv(synchro_handle, 32, data);
         `verif_info($sformatf("Got synchro with ret %0d, data %0h at %0t", ret, data, $time), 2);
         if (ret) $finish();

         if (data & CMD_SET_DATA) begin
             case(data[15:0])
{% for intf in intfs|isinput %}
              {{loop.index-1}} : begin
                  for(int i = 0; i < {{(intf['width'] + 31)//32}}; ++i) begin
                      ret = sock_get_bv(synchro_handle, 32, data);
                      `verif_info($sformatf("Reading input data for %s at %0t %0h", "{{intf['name']}}", $time, data), 2);
                 {% if intf['width'] <= 32 %}
                      {{intf['name']}}_data[({{intf['width']-1}}) : 0] = data;
                 {% else %}
                      if ((i+1)*32 <= {{intf['width']}})
                         {{intf['name']}}_data[i*32 +: 32] = data;
                      else
                         {{intf['name']}}_data[({{intf['width']-1}}) : {{32*((intf['width']-1) // 32)}}] = data;
                 {% endif %}

                  end
                  `verif_info($sformatf("Setting data for %s: %0h at %0t (ret = %0d)", "{{intf['name']}}", {{intf['name']}}_data, $time, ret), 2);
                  {{intf['name']}}_vif.valid <= 1'b1;
                  {{intf['name']}}_vif.data <= {{intf['name']}}_data;
               end
{% endfor %}
            endcase
         end else if (data & CMD_READ) begin
             case(data[15:0])
{% for intf in intfs %}
              {{loop.index-1}} : begin
  {% if intf['modport'] == 'producer' %}
                  if ({{intf['name']}}_vif.valid) begin
                     `verif_info($sformatf("[sock_put] output for %s at %0t", "{{intf['name']}}", $time), 2);
                     status = 1;
                     ret = sock_put(synchro_handle, status);
                     {{intf['name']}}_data = {{intf['name']}}_vif.data;
                     ret = sock_put(synchro_handle, {{intf['name']}}_data);
                  end else begin
                     status = 0;
                     `verif_info($sformatf("[sock_put] no output for %s at %0t: %0h", "{{intf['name']}}", $time, status), 2);
                     ret = sock_put(synchro_handle, status);
                  end
  {% else %}
                  status = {{intf['name']}}_vif.ready;
                  `verif_info($sformatf("[sock_put] ready status for %s: %0h", "{{intf['name']}}", status), 2);
                  ret = sock_put(synchro_handle, status);
  {% endif %}
                 end
{% endfor %}
            endcase
         end else if (data & CMD_ACK) begin
             case(data[15:0])
{% for intf in intfs %}
  {% if intf['modport'] == 'producer' %}
              {{loop.index-1}} : begin
                  `verif_info($sformatf("ACK for %s at %0t", "{{intf['name']}}", $time), 2);
                  {{intf['name']}}_vif.ready <= 1'b1;
               end
  {% endif %}
{% endfor %}
            endcase
         end else if (data & CMD_RESET) begin
             case(data[15:0])
{% for intf in intfs %}
              {{loop.index-1}} : begin
  {% if intf['modport'] == 'consumer' %}
                  `verif_info($sformatf("Resetting %s at %0t", "{{intf['name']}}", $time), 2);
                  {{intf['name']}}_vif.valid <= 1'b0;
               end
  {% else %}
                  `verif_info($sformatf("Resetting %s at %0t", "{{intf['name']}}", $time), 2);
                  {{intf['name']}}_vif.ready <= 1'b0;
               end
  {% endif -%}
{%- endfor %}
            endcase
         end else if (data & CMD_FORWARD) begin
           `verif_info($sformatf("Forward from %0t", $time), 2);
           #1;
           `verif_info($sformatf("Forward to %0t", $time), 2);
         end else if (data & CMD_CYCLE) begin
           @(posedge clk);
           #1;
         end else if (data & CMD_SYS_RESET) begin
{% for intf in intfs -%}
  {% if intf['modport'] == 'consumer' %}
            {{intf['name']}}_vif.valid <= 1'b0;
  {% else %}
            {{intf['name']}}_vif.ready <= 1'b0;
  {% endif -%}
{%- endfor %}
            drive_reset(data[15:0]);
            `verif_info($sformatf("[sock_done] Why? from %0t", $time), 2);
            ret = sock_done(synchro_handle);
            if (ret == 1) break;
         end
{% if 'synchro_req' in hooks %}
  {{snippets.hook_unroll(hooks, "synchro_req")}}
{% endif %}
      end
   end

{{snippets.module_inst(dut_name, param_map, "dut", port_map)|indent(3, true)}}

   initial begin
      clk = 0;
      rst = 1;
      #15 rst = 0;
   end
   always #10 clk = ~clk;

   // dut if to verification if
{% for intf in intfs %}
  {% if intf['modport'] == 'consumer' %}
    assign {{intf['name']}}.valid = {{intf['name']}}_vif.valid;
    assign {{intf['name']}}.data = {{intf['name']}}_vif.data;
    assign {{intf['name']}}_vif.ready = {{intf['name']}}.ready;
  {% else %}
    assign {{intf['name']}}_vif.valid = {{intf['name']}}.valid;
    assign {{intf['name']}}_vif.data = {{intf['name']}}.data;
    assign {{intf['name']}}.ready = {{intf['name']}}_vif.ready;
  {% endif %}
{% endfor %}

endmodule : top

`endif
