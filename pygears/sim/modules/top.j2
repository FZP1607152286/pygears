{%- import 'snippets.j2' as snippets -%}
`ifndef TOP_SV
`define TOP_SV

parameter CMD_SYS_RESET  = 32'h8000_0000;
parameter CMD_SET_DATA   = 32'h4000_0000;
parameter CMD_RESET      = 32'h2000_0000;
parameter CMD_FORWARD    = 32'h1000_0000;
parameter CMD_CYCLE      = 32'h0800_0000;
parameter CMD_READ       = 32'h0400_0000;
parameter CMD_ACK        = 32'h0200_0000;

module top;

   `include "socket_macros.svh"

   import socket_pkg::*;
   import sock::*;

   logic clk;
   logic rst;
   chandle synchro_handle;
{{snippets.hook_unroll(hooks, "module_init")}}

{% for s in structs %}
{{s|indent(3, true)}}
{% endfor %}

{% for intf in intfs -%}
   dti_verif_if#({{intf['name']}}_t) {{intf['name']}}_vif (clk, rst);
   dti#({{intf['width']}}) {{intf['name']}} ();
{% endfor %}
{% for intf in intfs -%} 
  {# {% if intf['modport'] == 'consumer' %}  #}
{#    socket_producer_driver#({{intf['name']}}_t) {{intf['name']}}_driver = new({{intf['name']}}_vif, "{{intf['name']}}", {{port}}); #}
{#   {% else %} #}
{#    socket_consumer_driver#({{intf['name']}}_t) {{intf['name']}}_driver = new({{intf['name']}}_vif, "{{intf['name']}}", {{port}}); #}
  {%- if intf['modport'] == 'producer' %}  
   activity_monitor#({{intf['name']}}_t, {{activity_timeout}}) {{intf['name']}}_mon = new({{intf['name']}}_vif, "{{intf['name']}}"); 
  {% endif -%} 
{%- endfor %} 

   initial begin
{% for intf in intfs -%}
      {{intf['name']}}_vif.name = "{{intf['name']}}";
{%- endfor %}
{#       fork #}
{# {% for intf in intfs %} #}
{#   {% if intf['modport'] == 'producer' %} #}
{#          {{intf['name']}}_driver.main(); #}
{#   {% endif %} #}
{# {% endfor %} #}
{#       join_none #}

      fork
         begin
            #0.5s;
            $warning("watchdog timer expired. killing test...");
{# {% for intf in intfs %} #}
{#             sock_close({{intf['name']}}_driver.handle); #}
{# {% endfor %} #}
            sock_close(synchro_handle);
            $finish();
         end
      join_none

{#       fork #}
{# {% for intf in intfs %} #}
{#   {% if intf['modport'] == 'consumer' %} #}
{#          {{intf['name']}}_driver.main(); #}
{#   {% endif %} #}
{# {% endfor %} #}
{#       join #}
{#       `verif_info("producer drivers finished", 5); #}

      fork 
{% for intf in intfs -%} 
  {%- if intf['modport'] == 'producer' %} 
         {{intf['name']}}_mon.main(); 
  {% endif -%} 
{%- endfor %} 
      join 
      `verif_info("activity monitors finished", 5); 

      disable fork;

{# {% for intf in intfs %} #}
{#   {% if intf['modport'] == 'producer' %} #}
{#       sock_close({{intf['name']}}_driver.handle); #}
{#   {% endif %} #}
{# {% endfor %} #}
      sock_close(synchro_handle);
      $finish();
   end

   task drive_reset(int duration);
      fork
         if (rst != 1) begin
            rst = 1;
            repeat(duration) @(negedge clk);
            rst = 0;
         end
      join_none
   endtask

   initial begin
      int ret;
      int steps;
      bit[31:0] data;
      bit[31:0] status;

{% for intf in intfs %}
      bit[{{intf['width']-1}}:0] {{intf['name']}}_data;
{% endfor %}
      // synchro socket
      `verif_info($sformatf("Waiting for socket"), 2);
      {# synchro_handle = sock_open("tcp://localhost:{{port}}", "_synchro"); #}
      synchro_handle = sock_open("unix:///tmp/socket_test.s", "_synchro");

{% for intf in intfs %}
  {% if intf['modport'] == 'producer' %}
      {{intf['name']}}_vif.ready <= 1'b0;
  {% else %}
      {{intf['name']}}_vif.valid <= 1'b0;
  {% endif %}
{% endfor %}

      `verif_info($sformatf("Socket open"), 2);
      forever begin
         {# do begin #}
         `verif_info($sformatf("Wait for data"), 2);
         ret = sock_get(synchro_handle, data);
         `verif_info($sformatf("Got synchro with ret %0d, data %0h at %0t", ret, data, $time), 2);
         if (ret == 2) break;

         if (data & CMD_SET_DATA) begin
             case(data[15:0])
{% for intf in intfs -%}
              {{loop.index-1}} : begin
  {% if intf['modport'] == 'consumer' %}
                  ret = sock_get(synchro_handle, {{intf['name']}}_data);
                  `verif_info($sformatf("Setting data for %s: %0h at %0t", "{{intf['name']}}", {{intf['name']}}_data, $time), 2);
                  {{intf['name']}}_vif.valid <= 1'b1;
                  {{intf['name']}}_vif.data <= {{intf['name']}}_data;
  {% endif %}
               end
{% endfor %}
            endcase
         end if (data & CMD_READ) begin
             case(data[15:0])
{% for intf in intfs %}
              {{loop.index-1}} : begin
  {% if intf['modport'] == 'producer' %}
                  if ({{intf['name']}}_vif.valid) begin
                     `verif_info($sformatf("Setting output for %s at %0t", "{{intf['name']}}", $time), 2);
                     status = 1;
                     ret = sock_put(synchro_handle, status);
                     {{intf['name']}}_data = {{intf['name']}}_vif.data;
                     ret = sock_put(synchro_handle, {{intf['name']}}_data);
                  end else begin
                     `verif_info($sformatf("No output for %s at %0t", "{{intf['name']}}", $time), 2);
                     status = 0;
                     ret = sock_put(synchro_handle, status);
                  end
  {% else %}
                  status = {{intf['name']}}_vif.ready;
                  ret = sock_put(synchro_handle, status);
  {% endif %}
                 end
{% endfor %}
            endcase
         end if (data & CMD_ACK) begin
             case(data[15:0])
{% for intf in intfs %}
              {{loop.index-1}} : begin
  {% if intf['modport'] == 'producer' %}
                  `verif_info($sformatf("ACK for %s at %0t", "{{intf['name']}}", $time), 2);
                  {{intf['name']}}_vif.ready <= 1'b1;
  {% endif %}
               end
{% endfor %}
            endcase
         end if (data & CMD_RESET) begin
             case(data[15:0])
{% for intf in intfs %}
              {{loop.index-1}} : begin
  {% if intf['modport'] == 'consumer' %}
                  `verif_info($sformatf("Resetting %s at %0t", "{{intf['name']}}", $time), 2);
                  {{intf['name']}}_vif.valid <= 1'b0;
               end
  {% else %}
                  `verif_info($sformatf("Resetting %s at %0t", "{{intf['name']}}", $time), 2);
                  {{intf['name']}}_vif.ready <= 1'b0;
               end
  {% endif -%}
{%- endfor %}
            endcase
         end if (data & CMD_FORWARD) begin
           steps = steps + 1;
           #1; 
           `verif_info($sformatf("Forward to %0t", $time), 2);
         end if (data & CMD_CYCLE) begin
           `verif_info($sformatf("Cycle from %0d steps at %0t", steps, $time), 2);
           #(20 - steps); 
           steps = 0;
           @(posedge clk); 
         end if (data & CMD_SYS_RESET) begin
{% for intf in intfs -%}
  {% if intf['modport'] == 'consumer' %}
            {{intf['name']}}_vif.valid <= 1'b0;
  {% else %}
            {{intf['name']}}_vif.ready <= 1'b0;
  {% endif -%}
{%- endfor %}
            drive_reset(data[15:0]);
            ret = sock_done(synchro_handle);
            if (ret == 1) break;
         end
{% if 'synchro_req' in hooks %}
  {{snippets.hook_unroll(hooks, "synchro_req")}}
{% endif %}
         {# end while (data != 0); #}
         {# `verif_info($sformatf("Got synchro 1 at %0t", $time), 1); #}
         {# @(posedge clk); #}
         {# #3; #}
         {# `verif_info($sformatf("Synchro 1 done at %0t", $time), 1); #}
         {# ret = sock_done(synchro_handle); #}
         {# if (ret == 1) break; #}

         {# ret = sock_get(synchro_handle, data); #}
         {# `verif_info($sformatf("Got synchro 2 at %0t", $time), 1); #}
         {# @(negedge clk); #}
         {# #3; #}
         {# ret = sock_done(synchro_handle); #}
         {# `verif_info($sformatf("Synchro 2 done at %0t", $time), 1); #}
         {# if (ret == 1) break; #}
      end
   end

{{snippets.module_inst(dut_name, param_map, "dut", port_map)|indent(3, true)}}

   initial begin
      clk = 0;
      rst = 1;
      #15 rst = 0;
   end
   always #10 clk = ~clk;

   // dut if to verification if
{% for intf in intfs %}
  {% if intf['modport'] == 'consumer' %}
    assign {{intf['name']}}.valid = {{intf['name']}}_vif.valid;
    assign {{intf['name']}}.data = {{intf['name']}}_vif.data;
    assign {{intf['name']}}_vif.ready = {{intf['name']}}.ready;
  {% else %}
    assign {{intf['name']}}_vif.valid = {{intf['name']}}.valid;
    assign {{intf['name']}}_vif.data = {{intf['name']}}.data;
    assign {{intf['name']}}.ready = {{intf['name']}}_vif.ready;
  {% endif %}
{% endfor %}

endmodule : top

`endif
