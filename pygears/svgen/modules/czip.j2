{%- import 'snippet.j2' as snippet -%}

module {{module_name}}
(
    input clk,
    input rst,
{{snippet.intf_list(intfs)|indent(4, True)}}
);

{% set queue_intf_names = queue_intfs|keymap("name") %}
{% set data_intf_names = data_intfs|keymap("name") %}
{% set input_intf_names = intfs|isinput|keymap("name") %}

{% for i in intfs %}
{{snippet.sv_struct_def(i['struct'])|indent(4, True)}}
{% endfor %}

{% for i in intfs %}
    {{i['name']}}_t {{i['name']}}_s;
{% endfor %}
{% for i in intfs|isinput %}
    assign {{i['name']}}_s = {{i['name']}}.data;
{% endfor %}

    assign dout_s.eot = {{queue_intf_names|format_list("%s_s.eot")|join(" | ")}};
    assign dout_s.data = { {{data_intf_names|reverse|format_list("%s_s.data")|join(", ")}} };

{% for i in queue_intfs|isinput %}
    logic {{i['name']}}_eot_aligned;
    assign {{i['name']}}_eot_aligned = ({{i['name']}}_s.eot==dout_s.eot[{{i['lvl']-1}}:0]);
{% endfor %}

    logic all_valid;
    logic all_aligned;
    logic  handshake;
    assign all_valid = {{input_intf_names|format_list("%s.valid")|join(" & ")}};
    assign all_aligned = {{queue_intf_names|format_list("%s_eot_aligned")|join(" & ")}};
    assign handshake = dout.valid & dout.ready;
    assign dout.valid = all_valid & all_aligned;
    assign dout.data = dout_s;

{% for i in intfs|isinput %}
  {% if i['lvl'] == 0 %}
    assign {{i['name']}}.ready = handshake;
  {%- else %}
    assign {{i['name']}}.ready = all_valid & (all_aligned ? dout.ready : !{{i['name']}}_eot_aligned);
  {%- endif %}

{% endfor %}

endmodule
