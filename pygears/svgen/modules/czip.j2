{%- import 'snippet.j2' as snippet -%}

{% call snippet.module_with_intf_structs(module_name, intfs, comment) %}

  {%- set queue_intf_names = queue_intfs|keymap("name") %}
  {%- set data_intf_names = data_intfs|keymap("name") %}
  {%- set input_intf_names = intfs|isinput|keymap("name") %}

    assign dout_s.eot = {{queue_intf_names|format_list("%s_s.eot")|join(" | ")}};
    assign dout_s.data = { {{data_intf_names|reverse|format_list("%s_s.data")|join(", ")}} };

  {% for i in queue_intfs|isinput %}
    logic {{i['name']}}_eot_aligned;
    assign {{i['name']}}_eot_aligned = ({{i['name']}}_s.eot==dout_s.eot[{{i['lvl']-1}}:0]);
  {% endfor %}

    logic all_valid;
    logic all_aligned;
    logic  handshake;
    assign all_valid = {{input_intf_names|format_list("%s.valid")|join(" & ")}};
    assign all_aligned = {{queue_intf_names|format_list("%s_eot_aligned")|join(" & ")}};
    assign handshake = dout.valid & dout.ready;
    assign dout.valid = all_valid & all_aligned;
    assign dout.data = dout_s;

  {% for i in intfs|isinput %}
    {% if i['lvl'] == 0 %}
    assign {{i['name']}}.ready = handshake;
    {%- else %}
    assign {{i['name']}}.ready = all_valid & (all_aligned ? dout.ready : !{{i['name']}}_eot_aligned);
    {%- endif %}

  {% endfor %}

{% endcall %}
