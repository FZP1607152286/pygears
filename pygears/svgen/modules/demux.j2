{%- import 'snippet.j2' as snippet -%}

module {{module_name}} #(
{% for i in intfs %}
  parameter {{i['param']}}     = {{i['width']}}{{ "," if not loop.last }}
{% endfor -%}
)
(
    input clk,
    input rst,
{{snippet.intf_list(intfs)|indent(4, True)}}
);

{{snippet.intf_inst("ctrl_if", width="CTRL_WIDTH", size=1, type="")|indent(4,True)}}
{{snippet.intf_inst("data_if", width="DIN_WIDTH-CTRL_WIDTH", size=1, type="")|indent(4,True)}}
{{snippet.intf_inst("data_sync_if", width="DIN_WIDTH-CTRL_WIDTH", size=1, type="")|indent(4,True)}}
{{snippet.intf_inst("ctrl_eot_sync", width="CTRL_WIDTH", size=1, type="")|indent(4,True)}}

    assign ctrl_if.data = din.data[DIN_WIDTH - 1: DIN_WIDTH - CTRL_WIDTH];
    assign ctrl_if.dvalid = din.dvalid;
    assign ctrl_if.eot = 0;

    assign data_if.data = din.data[DIN_WIDTH - CTRL_WIDTH - 1: 0];
    assign data_if.dvalid = din.dvalid;
    assign data_if.eot = 0;

    assign din.dready = ctrl_if.dready && data_if.dready;

{{snippet.module_inst(module_name + "_syncguard", {}, "syncguard", {"din0":"ctrl_if", "din1": "data_if", "dout0": "ctrl_eot_sync", "dout1": "data_sync_if"})|indent(4, True)}}

{% for i in intfs[2:] %}
    assign {{i['name']}}.data = data_sync_if.data;
{% endfor %}

    always_comb
    begin
        case( ctrl.data )
{% for i in intfs[2:] %}
            {{loop.index-1}} : begin
                data_sync_if.dready = {{i['name']}}.dready;
            end
{% endfor %}
            default: begin
                data_sync_if.dready = 0;
            end
        endcase
    end

    always_comb
    begin
{% for i in intfs[2:] %}
        {{i['name']}}.dvalid = 0;
        {{i['name']}}.eot = 0;
{% endfor %}

        case( ctrl.data )
{% for i in intfs[2:] %}
            {{loop.index-1}} : begin
                {{i['name']}}.dvalid = data_sync_if.dvalid;
            end
{% endfor %}
            default: begin
            end
        endcase
    end


{% for i in intfs[2:] %}
    logic {{i['name']}}_eot;
{% endfor %}

{% for i in intfs[2:] %}
    assign {{i['name']}}_eot = {{i['eot_expr']}};
{% endfor %}

   assign ctrl.data = ctrl_eot_sync.data;
   assign ctrl.dvalid = ctrl_eot_sync.dvalid;
   assign ctrl.eot = ctrl_eot_sync.eot;

    always_comb
    begin
        ctrl_eot_sync.dready = ctrl.dready;
        case(ctrl.data)
{% for i in intfs[2:] %}
            {{loop.index-1}} : begin
                ctrl_eot_sync.dready = ctrl.dready | ({{i['name']}}.dvalid && !{{i['name']}}_eot);
            end
{% endfor %}
        endcase
    end

endmodule
