{%- import 'snippet.j2' as snippet -%}

{% call snippet.module_with_intf_structs(module_name, intfs, intfs|isinput, comment) %}

  {%- set queue_intf_names = queue_intfs|keymap("name") %}
  {%- set data_intf_names = data_intfs|keymap("name") %}
  {%- set input_intf_names = intfs|isinput|keymap("name") %}

{% for i in intfs|selectattr('modport', 'equalto', 'consumer') %}
{{snippet.intf_inst(i['name']+"_if", width=i['param'], size=1, type="")|indent(4,True)}}
{% endfor %}

  {# {% for dout in intfs|isoutput %} #}
  {#   assign {{dout['name']}}.data = {{dout['name']}}_s; #}
  {# {% endfor %} #}

    logic all_valid;
    logic out_valid;
    logic all_aligned;
    logic handshake;
    logic eot_zip;

  {% for i in queue_intfs|isinput %}
    logic {{i['name']}}_eot_aligned;
    assign {{i['name']}}_eot_aligned = ({{i['name']}}_s.eot==dout_s.eot[{{i['lvl']-1}}:0]);
  {% endfor %}

    assign eot_zip     = {{queue_intf_names|format_list("%s_s.eot")|join(" | ")}};
    assign all_valid   = {{input_intf_names|format_list("%s.valid")|join(" & ")}};
    assign all_aligned = {{queue_intf_names|format_list("%s_eot_aligned")|join(" & ")}};
    assign out_valid   = all_valid & all_aligned;
    assign handshake   = dout.valid & dout.ready;

  {% for din, dout in zip(intfs|isinput, intfs|isoutput) %}
    assign {{dout['name']}}.valid = out_valid;
    assign {{dout['name']}}_s = {{din['name']}}_s;
  {% endfor %}

  {% for i in intfs|isinput %}
    {% if i['lvl'] == 0 %}
    assign {{i['name']}}.ready = handshake;
    {%- else %}
    assign {{i['name']}}.ready = all_valid & (all_aligned ? dout.ready : !{{i['name']}}_eot_aligned);
    {%- endif %}

  {% endfor %}

  {% set port_map = {} %}
  {% for i, din in enumerate(intfs|isinput) %}
    {% do port_map.update({"din%s" % i: din['name']+"_if"}) %}
  {% endfor %}

  {% for i, dout in enumerate(intfs|isoutput) %}
    {% do port_map.update({"dout%s" % i: dout['name']}) %}
  {% endfor %}
{# {% for i, intf in enumerate(intfs|isinput) %} #}
{#    {% do port_map.update({"din%s" % i: intf['name']+"_if"}) %} #}
{# {% endfor %} #}

{# {% for i, intf in enumerate(intfs|isinput) %} #}
{#    {% do port_map.update({"dout%s" % i: intf['name']}) %} #}
{# {% endfor %} #}

{{snippet.module_inst(module_name + "_syncguard", {}, "syncguard", port_map=port_map)|indent(4, True)}} 

{% endcall %}
